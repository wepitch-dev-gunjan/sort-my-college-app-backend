# # This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# # For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

# name: Node.js CI

# on:
#   push:
#     branches: ["main"]

# jobs:
#   build:
#     runs-on: self-hosted

#     strategy:
#       matrix:
#         node-version: [20.x]
#         # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

#     steps:
#       - uses: actions/checkout@v3
#       - name: Use Node.js ${{ matrix.node-version }}
#         uses: actions/setup-node@v3
#         with:
#           node-version: ${{ matrix.node-version }}
#           cache: "npm"
#       - run: |
#           cd ssl_certificates
#           touch ca_bundle.crt
#           echo "${{ secrets.CA_BUNDLE }}" > ca_bundle.crt
#       - run: |
#           cd ssl_certificates
#           touch certificate.crt
#           echo "${{ secrets.CERTIFICATE }}" > certificate.crt
#       - run: |
#           cd ssl_certificates
#           touch private.key
#           echo "${{ secrets.PRIVATE_KEY }}" > private.key
#       - run: |
#           cd counselor
#           touch .env
#           echo "${{ secrets.COUNSELLOR_SECRETS }}" > .env
#           npm ci
#           /root/.nvm/versions/node/v20.8.0/bin/pm2 start server.js --name=counsellor
#       - run: |
#           cd admin
#           touch .env
#           echo "${{ secrets.ADMIN_SECRETS }}" > .env
#           npm ci
#           /root/.nvm/versions/node/v20.8.0/bin/pm2 start server.js --name=admin
#       - run: |
#           cd notification-service
#           touch .env
#           echo "${{ secrets.NOTIFICATION_SERVICE_SECRETS }}" > .env
#           npm ci
#           /root/.nvm/versions/node/v20.8.0/bin/pm2 start server.js --name=notification-service
#       - run: |
#           cd user
#           touch .env
#           echo "${{ secrets.USER_SECRETS }}" > .env
#           npm ci
#           /root/.nvm/versions/node/v20.8.0/bin/pm2 start server.js --name=user
#       - run: |
#           cd webinar
#           touch .env
#           echo "${{ secrets.WEBINAR_SECRETS }}" > .env
#           npm ci
#           /root/.nvm/versions/node/v20.8.0/bin/pm2 start server.js --name=webinar
#       - run: |
#           cd api-gateway
#           touch .env
#           echo "${{ secrets.API_GATEWAY_SECRETS }}" > .env
#           npm ci
#           /root/.nvm/versions/node/v20.8.0/bin/pm2 start server.js --name=api-gateway
#       - run: |
#           /root/.nvm/versions/node/v20.8.0/bin/pm2 restart all
#           # /root/.nvm/versions/node/v20.8.0/bin/pm2 restart ep
name: Node.js CI

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
        # Adjust the Node.js versions based on your application's compatibility

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Create SSL certificates
        run: |
          cd ssl_certificates
          touch ca_bundle.crt
          echo "${{ secrets.CA_BUNDLE }}" > ca_bundle.crt
          touch certificate.crt
          echo "${{ secrets.CERTIFICATE }}" > certificate.crt
          touch private.key
          echo "${{ secrets.PRIVATE_KEY }}" > private.key

      - name: Start Node.js applications
        run: |
          cd counselor admin notification-service user webinar api-gateway
          for dir in */; do
            cd "$dir"
            touch .env
            case "$dir" in
              "counselor/") service="counsellor" ;;
              "admin/") service="admin" ;;
              "notification-service/") service="notification-service" ;;
              "user/") service="user" ;;
              "webinar/") service="webinar" ;;
              "api-gateway/") service="api-gateway" ;;
            esac
            echo "${{ secrets.${service^^}_SECRETS }}" > .env
            npm ci
            pm2 start server.js --name="$service"
            cd ..
          done

      - name: Restart all Node.js applications
        run: pm2 restart all
        
